
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author noahjarvback
 */
public class SokInformation extends javax.swing.JFrame {

    private static InfDB idb;

    /**
     * Creates new form SökInformation
     */
    public SokInformation(InfDB idb) throws InfException {
        initComponents();
        this.idb = idb;
        txtAnge.setVisible(false);
        lblAnge.setVisible(false);
        btnSok.setVisible(false);
        jScrollPane1.setVisible(false);
        txtAreaLista.setVisible(false);
        cbxOmrade.setVisible(false);
        btnAvbryt.setVisible(false);
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblSokFram = new javax.swing.JLabel();
        cbxSokval = new javax.swing.JComboBox<>();
        lblAnge = new javax.swing.JLabel();
        txtAnge = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaLista = new javax.swing.JTextArea();
        btnSok = new javax.swing.JButton();
        cbxOmrade = new javax.swing.JComboBox<>();
        btnAvbryt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(33, 31, 31));

        lblSokFram.setBackground(new java.awt.Color(255, 255, 255));
        lblSokFram.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 24)); // NOI18N
        lblSokFram.setForeground(new java.awt.Color(255, 255, 255));
        lblSokFram.setText("Sök fram information");

        cbxSokval.setBackground(new java.awt.Color(255, 255, 255));
        cbxSokval.setForeground(new java.awt.Color(0, 0, 0));
        cbxSokval.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj sökval:", "Alien", "Områdeschef" }));
        cbxSokval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSokvalActionPerformed(evt);
            }
        });

        lblAnge.setBackground(new java.awt.Color(153, 153, 153));
        lblAnge.setForeground(new java.awt.Color(153, 153, 153));
        lblAnge.setText("Ange ett namn för alien eller välj ett område för områdeschefen:");

        txtAnge.setBackground(new java.awt.Color(255, 255, 255));
        txtAnge.setForeground(new java.awt.Color(0, 0, 0));

        txtAreaLista.setBackground(new java.awt.Color(255, 255, 255));
        txtAreaLista.setColumns(20);
        txtAreaLista.setForeground(new java.awt.Color(0, 0, 0));
        txtAreaLista.setRows(5);
        txtAreaLista.setTabSize(1);
        jScrollPane1.setViewportView(txtAreaLista);

        btnSok.setBackground(new java.awt.Color(255, 255, 255));
        btnSok.setForeground(new java.awt.Color(0, 0, 0));
        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        cbxOmrade.setBackground(new java.awt.Color(255, 255, 255));
        cbxOmrade.setForeground(new java.awt.Color(0, 0, 0));
        cbxOmrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj område:" }));
        cbxOmrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxOmradeActionPerformed(evt);
            }
        });

        btnAvbryt.setBackground(new java.awt.Color(255, 255, 255));
        btnAvbryt.setForeground(new java.awt.Color(0, 0, 0));
        btnAvbryt.setText("Avbryt");
        btnAvbryt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvbrytActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAvbryt)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSok)
                    .addComponent(txtAnge, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnge)
                    .addComponent(lblSokFram)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cbxOmrade, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxSokval, javax.swing.GroupLayout.Alignment.LEADING, 0, 187, Short.MAX_VALUE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblSokFram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSokval, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAnge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAnge, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAvbryt)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillComboBox() throws InfException {
        // Fyller comboboxen med områdesnamn
        String query = "SELECT BENAMNING FROM OMRADE";
        ArrayList<String> omrade = idb.fetchColumn(query);
        for (String ettOmrade : omrade) {
            cbxOmrade.addItem(ettOmrade);
            System.out.println(omrade);
        }
    }

    private boolean okFunktion (){
        boolean ok = true;
        if(Validering.comboBox(cbxSokval) == true){
            ok = false;
            JOptionPane.showMessageDialog(null, "Välj ett av de alternativ från alien eller omradeschef som finns");
        }
        if(Validering.arTom(txtAnge) == true){
            ok = false;
        }
        return ok;
    }

    private boolean okFunktion2 (){
        boolean ok = true;
        if(Validering.comboBox(cbxOmrade) == true){
            ok = false;
            JOptionPane.showMessageDialog(null, "Välj ett av de alternativ från område som finns");
        }
        return ok;
    }
    private void cbxSokvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSokvalActionPerformed
        // Tar fram reserande rutor som man får söka i beroende på vilket val man gör i comboboxen cbxSokval
        String sokVal = cbxSokval.getSelectedItem().toString();
        if (sokVal.equals("Alien") || sokVal.equals("Områdeschef")) {

            txtAnge.setVisible(true);
            lblAnge.setVisible(true);
            btnSok.setVisible(true);
            jScrollPane1.setVisible(true);
            txtAreaLista.setVisible(true);
            btnAvbryt.setVisible(true);
            txtAnge.setText("");
            txtAreaLista.setText("");
            if (sokVal.equals("Områdeschef")) {
                cbxOmrade.setVisible(true);
            }
            if (sokVal.equals("Alien")) {
                cbxOmrade.setVisible(false);
            }

        }
    }//GEN-LAST:event_cbxSokvalActionPerformed

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        // Utför sökning och fyller textarean med information 
        if(okFunktion()==true){
        txtAreaLista.setText("");
        int i = cbxSokval.getSelectedIndex();
        String angeSokning = txtAnge.getText();
        switch (i) {
            case 1: {
                

                try {
                    
                    HashMap<String, String> alienInfo2 = idb.fetchRow("SELECT AGENT.NAMN, BENAMNING FROM ALIEN "
                            + "JOIN PLATS ON ALIEN.PLATS = PLATS.PLATS_ID "
                            + "JOIN AGENT on ALIEN.ANSVARIG_AGENT = AGENT.AGENT_ID "
                            + "WHERE ALIEN.NAMN = '" + angeSokning + "'");
                    System.out.println(alienInfo2);

                    HashMap<String, String> alienInfo = idb.fetchRow("SELECT ALIEN_ID, NAMN, LOSENORD, REGISTRERINGSDATUM, TELEFON FROM ALIEN "
                            + "WHERE ALIEN.NAMN = '" + angeSokning + "'");
                    angeSokning = alienInfo.get("NAMN");
                    if (angeSokning == null) {
                        JOptionPane.showMessageDialog(null, "Aliennamnet finns inte");
                    }
                    else{
                    txtAreaLista.append("Aliens ID:\t" + alienInfo.get("ALIEN_ID"));
                    txtAreaLista.append("\nAliens namn:\t" + alienInfo.get("NAMN"));
                    txtAreaLista.append("\nAliens lösenord:\t" + alienInfo.get("LOSENORD"));
                    txtAreaLista.append("\nRegistreringsdatum:\t" + alienInfo.get("REGISTRERINGSDATUM"));
                    txtAreaLista.append("\nTelefonnummer:\t" + alienInfo.get("TELEFON"));
                    txtAreaLista.append("\nAnsvarig agent:\t" + alienInfo2.get("NAMN"));
                    txtAreaLista.append("\nStad:\t" + alienInfo2.get("BENAMNING"));
                    hamtaRas();
                    }
                } catch (InfException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
                
                break;
            }
            case 2: {
                if(okFunktion2()==true){
                try {
                    HashMap<String, String> agentListan = idb.fetchRow("SELECT NAMN, BENAMNING FROM AGENT "
                            + "JOIN OMRADESCHEF ON AGENT.AGENT_ID = OMRADESCHEF.AGENT_ID "
                            + "JOIN OMRADE ON OMRADE.OMRADES_ID = OMRADESCHEF.OMRADE "
                            + "WHERE BENAMNING = '" + angeSokning + "'");
                    angeSokning = agentListan.get("BENAMNING");
                    System.out.println(angeSokning);
                    if(angeSokning == null){
                        JOptionPane.showMessageDialog(null, "Området finns inte");
                    }
                    else{
                    txtAreaLista.append("Områdeschef:\t" + agentListan.get("NAMN"));
                    }
                } catch (InfException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
                break;
            }
            }

        }
        }
        
    }//GEN-LAST:event_btnSokActionPerformed

    private void hamtaRas() throws InfException {
        //Kontrollerar så inga val har gjorts fel
        String angeSokning = txtAnge.getText();
        String query1 = "Select alien_id from Alien where namn = '" + angeSokning + "'";
        int alienId = Integer.parseInt(idb.fetchSingle(query1));
        String query = "Select alien_id from Boglodite where alien_id = " + alienId + "";
        String isBoggie = idb.fetchSingle(query);

        String query2 = "Select alien_id from Squid where alien_id = " + alienId + "";
        String isSquid = idb.fetchSingle(query2);

        String query3 = "Select alien_id from Worm where alien_id = " + alienId + "";
        String isWorm = idb.fetchSingle(query3);
        if (isBoggie != null) {
            txtAreaLista.append("\n" + "Ras:\t" + "Boglodite");
        }
        else if (isSquid != null)
        {
            txtAreaLista.append("\n" + "Ras:\t" + "Squid");
        }
        else{
            txtAreaLista.append("\n" + "Ras:\t" + "Worm");
        }

    }

    private void cbxOmradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxOmradeActionPerformed
        // Fyller områdesboxen med områdesnamn
        String valtOmrade = cbxOmrade.getSelectedItem().toString();
        txtAnge.setText(valtOmrade);
    }//GEN-LAST:event_cbxOmradeActionPerformed

    private void btnAvbrytActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvbrytActionPerformed
        // Stänger ner rutan
        dispose();
    }//GEN-LAST:event_btnAvbrytActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SokInformation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SokInformation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SokInformation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SokInformation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SokInformation(idb).setVisible(true);
                } catch (InfException ex) {
                    Logger.getLogger(SokInformation.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvbryt;
    private javax.swing.JButton btnSok;
    private javax.swing.JComboBox<String> cbxOmrade;
    private javax.swing.JComboBox<String> cbxSokval;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnge;
    private javax.swing.JLabel lblSokFram;
    private javax.swing.JTextField txtAnge;
    private javax.swing.JTextArea txtAreaLista;
    // End of variables declaration//GEN-END:variables
}
